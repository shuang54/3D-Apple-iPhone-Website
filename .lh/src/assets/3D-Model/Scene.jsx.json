{
    "sourceFile": "src/assets/3D-Model/Scene.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1685364360623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1685366491570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,21 @@\n */\n \n import React, { useRef } from 'react'\n import { useGLTF } from '@react-three/drei'\n+import { useThree } from '@react-three/fiber';\n+import { useLayoutEffect } from 'react';\n+import { gsap } from 'gsap';\n \n export default function Model(props) {\n+  const group = useRef();\n   const { nodes, materials } = useGLTF('/scene.gltf')\n+  let camera = useThree(state => state.camera);\n+  useLayoutEffect(()=>{\n+    gsap.to(camera.position,{x:1});\n+  },[])\n+\n+\n   return (\n     <group {...props} dispose={null}>\n       <group scale={0.01}>\n         <group scale={100}>\n"
                },
                {
                    "date": 1685366525283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n export default function Model(props) {\n   const group = useRef();\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera);\n+  console.log(camera);\n   useLayoutEffect(()=>{\n     gsap.to(camera.position,{x:1});\n   },[])\n \n"
                },
                {
                    "date": 1685366560854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   },[])\n \n \n   return (\n-    <group {...props} dispose={null}>\n+    <group ref={group} {...props} dispose={null}>\n       <group scale={0.01}>\n         <group scale={100}>\n           <mesh geometry={nodes.Frame_Frame_0.geometry} material={materials.Frame} />\n           <mesh geometry={nodes.Frame_Frame2_0.geometry} material={materials.Frame2} />\n"
                },
                {
                    "date": 1685366662903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera);\n   console.log(camera);\n   useLayoutEffect(()=>{\n-    gsap.to(camera.position,{x:1});\n+    gsap.to(camera.position,{x:1,y:0.5});\n   },[])\n \n \n   return (\n"
                },
                {
                    "date": 1685366674185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera);\n   console.log(camera);\n   useLayoutEffect(()=>{\n-    gsap.to(camera.position,{x:1,y:0.5});\n+    gsap.to(camera.position,{x:100,y:0.5});\n   },[])\n \n \n   return (\n"
                },
                {
                    "date": 1685366727103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,11 @@\n export default function Model(props) {\n   const group = useRef();\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera);\n-  console.log(camera);\n+  // console.log(camera);\n   useLayoutEffect(()=>{\n-    gsap.to(camera.position,{x:100,y:0.5});\n+    gsap.to(camera.position,{x:-1,y:0.5});\n   },[])\n \n \n   return (\n"
                },
                {
                    "date": 1685366756664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n export default function Model(props) {\n   const group = useRef();\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera);\n-  // console.log(camera);\n+  console.log(camera);\n   useLayoutEffect(()=>{\n     gsap.to(camera.position,{x:-1,y:0.5});\n   },[])\n \n"
                },
                {
                    "date": 1685366786304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera);\n   console.log(camera);\n   useLayoutEffect(()=>{\n-    gsap.to(camera.position,{x:-1,y:0.5});\n+    gsap.to(camera.position, { x: -1, y: 0.5 })\n   },[])\n \n \n   return (\n"
                },
                {
                    "date": 1685366857980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,51 +12,137 @@\n import { useThree } from '@react-three/fiber';\n import { useLayoutEffect } from 'react';\n import { gsap } from 'gsap';\n \n-export default function Model(props) {\n-  const group = useRef();\n+export default function Model({ ...props }) {\n+  const group = useRef()\n   const { nodes, materials } = useGLTF('/scene.gltf')\n-  let camera = useThree(state => state.camera);\n-  console.log(camera);\n-  useLayoutEffect(()=>{\n+  let camera = useThree((state) => state.camera)\n+  console.log(camera)\n+  useLayoutEffect(() => {\n     gsap.to(camera.position, { x: -1, y: 0.5 })\n-  },[])\n+  }, [])\n \n-\n   return (\n     <group ref={group} {...props} dispose={null}>\n       <group scale={0.01}>\n         <group scale={100}>\n-          <mesh geometry={nodes.Frame_Frame_0.geometry} material={materials.Frame} />\n-          <mesh geometry={nodes.Frame_Frame2_0.geometry} material={materials.Frame2} />\n-          <mesh geometry={nodes.Frame_Port_0.geometry} material={materials.Port} />\n-          <mesh geometry={nodes.Frame_Antenna_0.geometry} material={materials.Antenna} />\n-          <mesh geometry={nodes.Frame_Mic_0.geometry} material={materials.material} />\n-          <mesh geometry={nodes.Body_Mic_0.geometry} material={materials.material} />\n-          <mesh geometry={nodes.Body_Bezel_0.geometry} material={materials.Bezel} />\n-          <mesh geometry={nodes.Body_Body_0.geometry} material={materials.Body} />\n-          <mesh geometry={nodes.Body_Wallpaper_0.geometry} material={materials.Wallpaper} />\n-          <mesh geometry={nodes.Body_Camera_Glass_0.geometry} material={materials.Camera_Glass} />\n-          <mesh geometry={nodes.Body_Lens_0.geometry} material={materials.Lens} />\n-          <mesh geometry={nodes.Body_Material_0.geometry} material={materials.Material} />\n-          <mesh geometry={nodes.Camera_Body_0.geometry} material={materials.Body} />\n-          <mesh geometry={nodes.Camera_Glass_0.geometry} material={materials.Glass} />\n-          <mesh geometry={nodes.Camera_Camera_Frame001_0.geometry} material={materials['Camera_Frame.001']} />\n-          <mesh geometry={nodes.Camera_Mic_0.geometry} material={materials.material} />\n-          <mesh geometry={nodes.Body001_Screen_Glass_0.geometry} material={materials.Screen_Glass} />\n-          <mesh geometry={nodes.Button_Frame_0.geometry} material={materials.Frame} />\n-          <mesh geometry={nodes.Circle003_Frame_0.geometry} material={materials.Frame} />\n-          <mesh geometry={nodes.Apple_Logo_Logo_0.geometry} material={materials.Logo} />\n-          <mesh geometry={nodes.Camera001_Body_0.geometry} material={materials.Body} />\n-          <mesh geometry={nodes.Camera001_Gray_Glass_0.geometry} material={materials.Gray_Glass} />\n-          <mesh geometry={nodes.Camera001_Flash_0.geometry} material={materials.Flash} />\n-          <mesh geometry={nodes.Camera001_Port_0.geometry} material={materials.Port} />\n-          <mesh geometry={nodes.Camera001_Camera_Frame_0.geometry} material={materials.Camera_Frame} />\n-          <mesh geometry={nodes.Camera001_Camera_Glass_0.geometry} material={materials.Camera_Glass} />\n-          <mesh geometry={nodes.Camera001_Lens_0.geometry} material={materials.Lens} />\n-          <mesh geometry={nodes.Camera001_Black_Glass_0.geometry} material={materials.Black_Glass} />\n-          <mesh geometry={nodes.Camera003_Material002_0.geometry} material={materials['Material.002']} />\n+          <mesh\n+            geometry={nodes.Frame_Frame_0.geometry}\n+            material={materials.Frame}\n+          />\n+          <mesh\n+            geometry={nodes.Frame_Frame2_0.geometry}\n+            material={materials.Frame2}\n+          />\n+          <mesh\n+            geometry={nodes.Frame_Port_0.geometry}\n+            material={materials.Port}\n+          />\n+          <mesh\n+            geometry={nodes.Frame_Antenna_0.geometry}\n+            material={materials.Antenna}\n+          />\n+          <mesh\n+            geometry={nodes.Frame_Mic_0.geometry}\n+            material={materials.material}\n+          />\n+          <mesh\n+            geometry={nodes.Body_Mic_0.geometry}\n+            material={materials.material}\n+          />\n+          <mesh\n+            geometry={nodes.Body_Bezel_0.geometry}\n+            material={materials.Bezel}\n+          />\n+          <mesh\n+            geometry={nodes.Body_Body_0.geometry}\n+            material={materials.Body}\n+          />\n+          <mesh\n+            geometry={nodes.Body_Wallpaper_0.geometry}\n+            material={materials.Wallpaper}\n+          />\n+          <mesh\n+            geometry={nodes.Body_Camera_Glass_0.geometry}\n+            material={materials.Camera_Glass}\n+          />\n+          <mesh\n+            geometry={nodes.Body_Lens_0.geometry}\n+            material={materials.Lens}\n+          />\n+          <mesh\n+            geometry={nodes.Body_Material_0.geometry}\n+            material={materials.Material}\n+          />\n+          <mesh\n+            geometry={nodes.Camera_Body_0.geometry}\n+            material={materials.Body}\n+          />\n+          <mesh\n+            geometry={nodes.Camera_Glass_0.geometry}\n+            material={materials.Glass}\n+          />\n+          <mesh\n+            geometry={nodes.Camera_Camera_Frame001_0.geometry}\n+            material={materials['Camera_Frame.001']}\n+          />\n+          <mesh\n+            geometry={nodes.Camera_Mic_0.geometry}\n+            material={materials.material}\n+          />\n+          <mesh\n+            geometry={nodes.Body001_Screen_Glass_0.geometry}\n+            material={materials.Screen_Glass}\n+          />\n+          <mesh\n+            geometry={nodes.Button_Frame_0.geometry}\n+            material={materials.Frame}\n+          />\n+          <mesh\n+            geometry={nodes.Circle003_Frame_0.geometry}\n+            material={materials.Frame}\n+          />\n+          <mesh\n+            geometry={nodes.Apple_Logo_Logo_0.geometry}\n+            material={materials.Logo}\n+          />\n+          <mesh\n+            geometry={nodes.Camera001_Body_0.geometry}\n+            material={materials.Body}\n+          />\n+          <mesh\n+            geometry={nodes.Camera001_Gray_Glass_0.geometry}\n+            material={materials.Gray_Glass}\n+          />\n+          <mesh\n+            geometry={nodes.Camera001_Flash_0.geometry}\n+            material={materials.Flash}\n+          />\n+          <mesh\n+            geometry={nodes.Camera001_Port_0.geometry}\n+            material={materials.Port}\n+          />\n+          <mesh\n+            geometry={nodes.Camera001_Camera_Frame_0.geometry}\n+            material={materials.Camera_Frame}\n+          />\n+          <mesh\n+            geometry={nodes.Camera001_Camera_Glass_0.geometry}\n+            material={materials.Camera_Glass}\n+          />\n+          <mesh\n+            geometry={nodes.Camera001_Lens_0.geometry}\n+            material={materials.Lens}\n+          />\n+          <mesh\n+            geometry={nodes.Camera001_Black_Glass_0.geometry}\n+            material={materials.Black_Glass}\n+          />\n+          <mesh\n+            geometry={nodes.Camera003_Material002_0.geometry}\n+            material={materials['Material.002']}\n+          />\n         </group>\n       </group>\n     </group>\n   )\n"
                },
                {
                    "date": 1685366911548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n export default function Model({ ...props }) {\n   const group = useRef()\n   const { nodes, materials } = useGLTF('/scene.gltf')\n-  let camera = useThree((state) => state.camera)\n+  let camera = useThree(state => state.camera)\n   console.log(camera)\n   useLayoutEffect(() => {\n     gsap.to(camera.position, { x: -1, y: 0.5 })\n   }, [])\n"
                },
                {
                    "date": 1685366973741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n   console.log(camera)\n   useLayoutEffect(() => {\n-    gsap.to(camera.position, { x: -1, y: 0.5 })\n+    gsap.to(camera.position,{x:-1,y:0.5})\n   }, [])\n \n   return (\n     <group ref={group} {...props} dispose={null}>\n"
                },
                {
                    "date": 1685367024369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n import { useGLTF } from '@react-three/drei'\n import { useThree } from '@react-three/fiber';\n import { useLayoutEffect } from 'react';\n import { gsap } from 'gsap';\n-\n+import { ScrollTrigger } from 'gsap/all';\n export default function Model({ ...props }) {\n   const group = useRef()\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n"
                },
                {
                    "date": 1685367358803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,17 +10,27 @@\n import React, { useRef } from 'react'\n import { useGLTF } from '@react-three/drei'\n import { useThree } from '@react-three/fiber';\n import { useLayoutEffect } from 'react';\n-import { gsap } from 'gsap';\n+import gsap from 'gsap';\n import { ScrollTrigger } from 'gsap/all';\n export default function Model({ ...props }) {\n   const group = useRef()\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n   console.log(camera)\n   useLayoutEffect(() => {\n-    gsap.to(camera.position,{x:-1,y:0.5})\n+    let t1 = gsap.timeline({\n+      scrollTrigger:{\n+        trigger:\"#phone-model\",\n+        start:\"top top\",\n+        end:\"bottom+=500 bottom\",\n+        markers:true\n+      }\n+    })\n+    \n+    t1.fromTo(camera.position,{y:2},{y:0})\n+    t1.to(camera.position,{x:0},{x:0})\n   }, [])\n \n   return (\n     <group ref={group} {...props} dispose={null}>\n"
                },
                {
                    "date": 1685367384662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n     \n     t1.fromTo(camera.position,{y:2},{y:0})\n     t1.to(camera.position,{x:0},{x:0})\n   }, [])\n+  console.log(camera)\n \n   return (\n     <group ref={group} {...props} dispose={null}>\n       <group scale={0.01}>\n"
                },
                {
                    "date": 1685367442136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,8 @@\n       }\n     })\n     \n     t1.fromTo(camera.position,{y:2},{y:0})\n-    t1.to(camera.position,{x:0},{x:0})\n   }, [])\n   console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685367454437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         markers:true\n       }\n     })\n     \n-    t1.fromTo(camera.position,{y:2},{y:0})\n+    t1.fromTo(camera.translateX,{y:2},{y:0})\n   }, [])\n   console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685367465049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         markers:true\n       }\n     })\n     \n-    t1.fromTo(camera.translateX,{y:2},{y:0})\n+    t1.fromTo(camera.position,{y:2},{y:0})\n   }, [])\n   console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685367480180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n       }\n     })\n     \n     t1.fromTo(camera.position,{y:2},{y:0})\n+    t1.to(camera.position,{x:0},{x:0})\n   }, [])\n   console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685530974950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n     let t1 = gsap.timeline({\n       scrollTrigger:{\n         trigger:\"#phone-model\",\n         start:\"top top\",\n+        endTrigger:\"#battery\",\n         end:\"bottom+=500 bottom\",\n         markers:true\n       }\n     })\n"
                },
                {
                    "date": 1685531023968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n       scrollTrigger:{\n         trigger:\"#phone-model\",\n         start:\"top top\",\n         endTrigger:\"#battery\",\n-        end:\"bottom+=500 bottom\",\n+        end:\"top top\",\n         markers:true\n       }\n     })\n     \n"
                },
                {
                    "date": 1685531098475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n export default function Model({ ...props }) {\n   const group = useRef()\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n+  let scene = useThree(state => state.scene);\n   console.log(camera)\n   useLayoutEffect(() => {\n     let t1 = gsap.timeline({\n       scrollTrigger:{\n"
                },
                {
                    "date": 1685531146806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n       }\n     })\n     \n     t1.fromTo(camera.position,{y:2},{y:0})\n-    t1.to(camera.position,{x:0},{x:0})\n+    t1.to(camera.rotation,{y:0.8})\n   }, [])\n   console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685531164107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n       }\n     })\n     \n     t1.fromTo(camera.position,{y:2},{y:0})\n-    t1.to(camera.rotation,{y:0.8})\n+    t1.to(scene.rotation, { y: 0.8 })\n   }, [])\n   console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685531235817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,10 @@\n         trigger:\"#phone-model\",\n         start:\"top top\",\n         endTrigger:\"#battery\",\n         end:\"top top\",\n-        markers:true\n+        markers:true,\n+        scrub:true,\n       }\n     })\n     \n     t1.fromTo(camera.position,{y:2},{y:0})\n"
                },
                {
                    "date": 1685531331382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,16 @@\n         scrub:true,\n       }\n     })\n     \n-    t1.fromTo(camera.position,{y:2},{y:0})\n-    t1.to(scene.rotation, { y: 0.8 })\n+    t1.fromTo(camera.position, { y: 2 }, { y: 0 })\n+      .to(scene.rotation, { y: 0.8 })\n+      .to(scene.rotation, { y: 3 })\n+      .to(scene.rotation, { z: 1.58 })\n+      .to(scene.position, { z: 4 })\n+      .to(scene.rotation, {y:0,z:0})\n+\n+\n   }, [])\n   console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685531384705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     t1.fromTo(camera.position, { y: 2 }, { y: 0 })\n       .to(scene.rotation, { y: 0.8 })\n       .to(scene.rotation, { y: 3 })\n       .to(scene.rotation, { z: 1.58 })\n-      .to(scene.position, { z: 4 })\n+      .to(camera.position, { z: 4 })\n       .to(scene.rotation, {y:0,z:0})\n \n \n   }, [])\n"
                },
                {
                    "date": 1685531400739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n   let camera = useThree(state => state.camera)\n   let scene = useThree(state => state.scene);\n   console.log(camera)\n   useLayoutEffect(() => {\n+    camera.position.set()\n     let t1 = gsap.timeline({\n       scrollTrigger:{\n         trigger:\"#phone-model\",\n         start:\"top top\",\n"
                },
                {
                    "date": 1685531410884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   let camera = useThree(state => state.camera)\n   let scene = useThree(state => state.scene);\n   console.log(camera)\n   useLayoutEffect(() => {\n-    camera.position.set()\n+    camera.position.set(0,2,6);\n     let t1 = gsap.timeline({\n       scrollTrigger:{\n         trigger:\"#phone-model\",\n         start:\"top top\",\n"
                },
                {
                    "date": 1685531606917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,13 @@\n       .to(scene.rotation, { y: 0.8 })\n       .to(scene.rotation, { y: 3 })\n       .to(scene.rotation, { z: 1.58 })\n       .to(camera.position, { z: 4 })\n-      .to(scene.rotation, {y:0,z:0})\n+      .to(scene.rotation, { y: 0, z: 0 })\n+      .to(camera.position, { z: 6, x: -1 })\n+      .to(scene.rotation, { z: 0, y: 6.3 })\n+      .to(camera.position, { x: 0.8, y: 0 })\n \n-\n   }, [])\n   console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685531713236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     camera.position.set(0,2,6);\n     let t1 = gsap.timeline({\n       scrollTrigger:{\n         trigger:\"#phone-model\",\n-        start:\"top top\",\n+        start:\"top+=200 top\",\n         endTrigger:\"#battery\",\n         end:\"top top\",\n         markers:true,\n         scrub:true,\n@@ -34,17 +34,17 @@\n     \n     t1.fromTo(camera.position, { y: 2 }, { y: 0 })\n       .to(scene.rotation, { y: 0.8 })\n       .to(scene.rotation, { y: 3 })\n-      .to(scene.rotation, { z: 1.58 })\n-      .to(camera.position, { z: 4 })\n-      .to(scene.rotation, { y: 0, z: 0 })\n-      .to(camera.position, { z: 6, x: -1 })\n-      .to(scene.rotation, { z: 0, y: 6.3 })\n-      .to(camera.position, { x: 0.8, y: 0 })\n+      .to(scene.rotation, { z: 1.58 }, 'key1')\n+      .to(camera.position, { z: 4 }, 'key1')\n+      .to(scene.rotation, { y: 0, z: 0 }, 'ke2')\n+      .to(camera.position, { z: 6, x: -1 }, 'key2')\n+      .to(scene.rotation, { z: 0, y: 6.3 }, 'key3')\n+      .to(camera.position, { x: 0.8, y: 0 }, 'key3')\n \n   }, [])\n-  console.log(camera)\n+  // console.log(camera)\n \n   return (\n     <group ref={group} {...props} dispose={null}>\n       <group scale={0.01}>\n"
                },
                {
                    "date": 1685532250877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         trigger:\"#phone-model\",\n         start:\"top+=200 top\",\n         endTrigger:\"#battery\",\n         end:\"top top\",\n-        markers:true,\n+        // markers:true,\n         scrub:true,\n       }\n     })\n     \n"
                },
                {
                    "date": 1685532302196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,8 @@\n         trigger:\"#phone-model\",\n         start:\"top+=200 top\",\n         endTrigger:\"#battery\",\n         end:\"top top\",\n-        // markers:true,\n         scrub:true,\n       }\n     })\n     \n"
                },
                {
                    "date": 1685532313099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n         trigger:\"#phone-model\",\n         start:\"top+=200 top\",\n         endTrigger:\"#battery\",\n         end:\"top top\",\n+        markers:true,\n         scrub:true,\n       }\n     })\n     \n"
                },
                {
                    "date": 1685532328228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n         trigger:\"#phone-model\",\n         start:\"top+=200 top\",\n         endTrigger:\"#battery\",\n         end:\"top top\",\n+        scrub:true,\n         markers:true,\n-        scrub:true,\n       }\n     })\n     \n     t1.fromTo(camera.position, { y: 2 }, { y: 0 })\n"
                },
                {
                    "date": 1685532460083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n   let scene = useThree(state => state.scene);\n   console.log(camera)\n   useLayoutEffect(() => {\n     camera.position.set(0,2,6);\n+    materials.Body.color.set('#9BB5CE');\n     let t1 = gsap.timeline({\n       scrollTrigger:{\n         trigger:\"#phone-model\",\n         start:\"top+=200 top\",\n"
                }
            ],
            "date": 1685364360623,
            "name": "Commit-0",
            "content": "/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.2.2 scene.gltf\nAuthor: DatSketch (https://sketchfab.com/DatSketch)\nLicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nSource: https://sketchfab.com/3d-models/apple-iphone-13-pro-max-4328dea00e47497dbeac73c556121bc9\nTitle: Apple iPhone 13 Pro Max\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\n\nexport default function Model(props) {\n  const { nodes, materials } = useGLTF('/scene.gltf')\n  return (\n    <group {...props} dispose={null}>\n      <group scale={0.01}>\n        <group scale={100}>\n          <mesh geometry={nodes.Frame_Frame_0.geometry} material={materials.Frame} />\n          <mesh geometry={nodes.Frame_Frame2_0.geometry} material={materials.Frame2} />\n          <mesh geometry={nodes.Frame_Port_0.geometry} material={materials.Port} />\n          <mesh geometry={nodes.Frame_Antenna_0.geometry} material={materials.Antenna} />\n          <mesh geometry={nodes.Frame_Mic_0.geometry} material={materials.material} />\n          <mesh geometry={nodes.Body_Mic_0.geometry} material={materials.material} />\n          <mesh geometry={nodes.Body_Bezel_0.geometry} material={materials.Bezel} />\n          <mesh geometry={nodes.Body_Body_0.geometry} material={materials.Body} />\n          <mesh geometry={nodes.Body_Wallpaper_0.geometry} material={materials.Wallpaper} />\n          <mesh geometry={nodes.Body_Camera_Glass_0.geometry} material={materials.Camera_Glass} />\n          <mesh geometry={nodes.Body_Lens_0.geometry} material={materials.Lens} />\n          <mesh geometry={nodes.Body_Material_0.geometry} material={materials.Material} />\n          <mesh geometry={nodes.Camera_Body_0.geometry} material={materials.Body} />\n          <mesh geometry={nodes.Camera_Glass_0.geometry} material={materials.Glass} />\n          <mesh geometry={nodes.Camera_Camera_Frame001_0.geometry} material={materials['Camera_Frame.001']} />\n          <mesh geometry={nodes.Camera_Mic_0.geometry} material={materials.material} />\n          <mesh geometry={nodes.Body001_Screen_Glass_0.geometry} material={materials.Screen_Glass} />\n          <mesh geometry={nodes.Button_Frame_0.geometry} material={materials.Frame} />\n          <mesh geometry={nodes.Circle003_Frame_0.geometry} material={materials.Frame} />\n          <mesh geometry={nodes.Apple_Logo_Logo_0.geometry} material={materials.Logo} />\n          <mesh geometry={nodes.Camera001_Body_0.geometry} material={materials.Body} />\n          <mesh geometry={nodes.Camera001_Gray_Glass_0.geometry} material={materials.Gray_Glass} />\n          <mesh geometry={nodes.Camera001_Flash_0.geometry} material={materials.Flash} />\n          <mesh geometry={nodes.Camera001_Port_0.geometry} material={materials.Port} />\n          <mesh geometry={nodes.Camera001_Camera_Frame_0.geometry} material={materials.Camera_Frame} />\n          <mesh geometry={nodes.Camera001_Camera_Glass_0.geometry} material={materials.Camera_Glass} />\n          <mesh geometry={nodes.Camera001_Lens_0.geometry} material={materials.Lens} />\n          <mesh geometry={nodes.Camera001_Black_Glass_0.geometry} material={materials.Black_Glass} />\n          <mesh geometry={nodes.Camera003_Material002_0.geometry} material={materials['Material.002']} />\n        </group>\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/scene.gltf')\n"
        }
    ]
}