{
    "sourceFile": "src/components/Scene.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1685535617177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1685535658099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,11 +41,9 @@\n       .to(scene.rotation, { y: 0, z: 0 }, 'ke2')\n       .to(camera.position, { z: 6, x: -1 }, 'key2')\n       .to(scene.rotation, { z: 0, y: 6.3 }, 'key3')\n       .to(camera.position, { x: 0.8, y: 0 }, 'key3')\n- return () => {\n-   if (t1) t1.kill()\n- }\n+\n   }, [])\n   // console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685535680962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,11 @@\n       .to(scene.rotation, { y: 0, z: 0 }, 'ke2')\n       .to(camera.position, { z: 6, x: -1 }, 'key2')\n       .to(scene.rotation, { z: 0, y: 6.3 }, 'key3')\n       .to(camera.position, { x: 0.8, y: 0 }, 'key3')\n-\n+ return () => {\n+   if (t1) t1.kill()\n+ }\n   }, [])\n   // console.log(camera)\n \n   return (\n"
                },
                {
                    "date": 1685538971132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,35 +18,62 @@\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n   let scene = useThree(state => state.scene);\n   console.log(camera)\n-  useLayoutEffect(() => {\n-    camera.position.set(0,2,6);\n-    materials.Body.color.set('#9BB5CE');\n-    let t1 = gsap.timeline({\n-      scrollTrigger:{\n-        trigger:\"#phone-model\",\n-        start:\"top+=200 top\",\n-        endTrigger:\"#battery\",\n-        end:\"top top\",\n-        scrub:true,\n-        markers:true,\n-      }\n-    })\n-    \n-    t1.fromTo(camera.position, { y: 2 }, { y: 0 })\n-      .to(scene.rotation, { y: 0.8 })\n-      .to(scene.rotation, { y: 3 })\n-      .to(scene.rotation, { z: 1.58 }, 'key1')\n-      .to(camera.position, { z: 4 }, 'key1')\n-      .to(scene.rotation, { y: 0, z: 0 }, 'ke2')\n-      .to(camera.position, { z: 6, x: -1 }, 'key2')\n-      .to(scene.rotation, { z: 0, y: 6.3 }, 'key3')\n-      .to(camera.position, { x: 0.8, y: 0 }, 'key3')\n- return () => {\n-   if (t1) t1.kill()\n- }\n-  }, [])\n+   useLayoutEffect(() => {\n+     camera.position.set(0, 2, 6)\n+     materials.Body.color.set('#9BB5CE')\n+\n+     let fov = camera.fov\n+\n+     fov = (1400 * 18) / window.innerWidth\n+     camera.fov = fov\n+     camera.updateProjectionMatrix()\n+\n+     let mm = gsap.matchMedia()\n+\n+     mm.add(\n+       {\n+         // set up any number of arbitrarily-named conditions. The function below will be called when ANY of them match.\n+         isDesktop: `(min-width: 48em)`,\n+         isMobile: `(max-width:48em`\n+       },\n+       (context) => {\n+         // context.conditions has a boolean property for each condition defined above indicating if it's matched or not.\n+         let { isDesktop, isMobile } = context.conditions\n+\n+         let t1 = gsap.timeline({\n+           scrollTrigger: {\n+             trigger: '#phone-model',\n+             start: 'top+=200 top',\n+             endTrigger: '#battery',\n+             end: 'top top',\n+             scrub: 1\n+             // markers: true,\n+           }\n+         })\n+\n+         t1.fromTo(camera.position, { y: 2 }, { y: 0 })\n+           .to(scene.rotation, { y: 0.8 })\n+           .to(scene.rotation, { y: 3 })\n+           .to(scene.rotation, { z: 1.58 }, 'key1')\n+           .to(camera.position, { z: 4 }, 'key1')\n+           .to(scene.rotation, { y: 0, z: 0 }, 'key2')\n+           .to(camera.position, { z: 6, x: isDesktop ? -1 : 0 }, 'key2')\n+           .to(scene.rotation, { z: 0, y: 6.3 }, 'key3')\n+           .to(camera.position, { x: isDesktop ? 0.8 : 0, y: 0 }, 'key3')\n+\n+         if (isMobile) {\n+           camera.fov = 20\n+           camera.updateProjectionMatrix()\n+         }\n+\n+         return () => {\n+           if (t1) t1.kill()\n+         }\n+       }\n+     )\n+   }, [])\n   // console.log(camera)\n \n   return (\n     <group ref={group} {...props} dispose={null}>\n"
                }
            ],
            "date": 1685535617177,
            "name": "Commit-0",
            "content": "/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.2.2 scene.gltf\nAuthor: DatSketch (https://sketchfab.com/DatSketch)\nLicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nSource: https://sketchfab.com/3d-models/apple-iphone-13-pro-max-4328dea00e47497dbeac73c556121bc9\nTitle: Apple iPhone 13 Pro Max\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport { useThree } from '@react-three/fiber';\nimport { useLayoutEffect } from 'react';\nimport gsap from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\nexport default function Model({ ...props }) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF('/scene.gltf')\n  let camera = useThree(state => state.camera)\n  let scene = useThree(state => state.scene);\n  console.log(camera)\n  useLayoutEffect(() => {\n    camera.position.set(0,2,6);\n    materials.Body.color.set('#9BB5CE');\n    let t1 = gsap.timeline({\n      scrollTrigger:{\n        trigger:\"#phone-model\",\n        start:\"top+=200 top\",\n        endTrigger:\"#battery\",\n        end:\"top top\",\n        scrub:true,\n        markers:true,\n      }\n    })\n    \n    t1.fromTo(camera.position, { y: 2 }, { y: 0 })\n      .to(scene.rotation, { y: 0.8 })\n      .to(scene.rotation, { y: 3 })\n      .to(scene.rotation, { z: 1.58 }, 'key1')\n      .to(camera.position, { z: 4 }, 'key1')\n      .to(scene.rotation, { y: 0, z: 0 }, 'ke2')\n      .to(camera.position, { z: 6, x: -1 }, 'key2')\n      .to(scene.rotation, { z: 0, y: 6.3 }, 'key3')\n      .to(camera.position, { x: 0.8, y: 0 }, 'key3')\n return () => {\n   if (t1) t1.kill()\n }\n  }, [])\n  // console.log(camera)\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group scale={0.01}>\n        <group scale={100}>\n          <mesh\n            geometry={nodes.Frame_Frame_0.geometry}\n            material={materials.Frame}\n          />\n          <mesh\n            geometry={nodes.Frame_Frame2_0.geometry}\n            material={materials.Frame2}\n          />\n          <mesh\n            geometry={nodes.Frame_Port_0.geometry}\n            material={materials.Port}\n          />\n          <mesh\n            geometry={nodes.Frame_Antenna_0.geometry}\n            material={materials.Antenna}\n          />\n          <mesh\n            geometry={nodes.Frame_Mic_0.geometry}\n            material={materials.material}\n          />\n          <mesh\n            geometry={nodes.Body_Mic_0.geometry}\n            material={materials.material}\n          />\n          <mesh\n            geometry={nodes.Body_Bezel_0.geometry}\n            material={materials.Bezel}\n          />\n          <mesh\n            geometry={nodes.Body_Body_0.geometry}\n            material={materials.Body}\n          />\n          <mesh\n            geometry={nodes.Body_Wallpaper_0.geometry}\n            material={materials.Wallpaper}\n          />\n          <mesh\n            geometry={nodes.Body_Camera_Glass_0.geometry}\n            material={materials.Camera_Glass}\n          />\n          <mesh\n            geometry={nodes.Body_Lens_0.geometry}\n            material={materials.Lens}\n          />\n          <mesh\n            geometry={nodes.Body_Material_0.geometry}\n            material={materials.Material}\n          />\n          <mesh\n            geometry={nodes.Camera_Body_0.geometry}\n            material={materials.Body}\n          />\n          <mesh\n            geometry={nodes.Camera_Glass_0.geometry}\n            material={materials.Glass}\n          />\n          <mesh\n            geometry={nodes.Camera_Camera_Frame001_0.geometry}\n            material={materials['Camera_Frame.001']}\n          />\n          <mesh\n            geometry={nodes.Camera_Mic_0.geometry}\n            material={materials.material}\n          />\n          <mesh\n            geometry={nodes.Body001_Screen_Glass_0.geometry}\n            material={materials.Screen_Glass}\n          />\n          <mesh\n            geometry={nodes.Button_Frame_0.geometry}\n            material={materials.Frame}\n          />\n          <mesh\n            geometry={nodes.Circle003_Frame_0.geometry}\n            material={materials.Frame}\n          />\n          <mesh\n            geometry={nodes.Apple_Logo_Logo_0.geometry}\n            material={materials.Logo}\n          />\n          <mesh\n            geometry={nodes.Camera001_Body_0.geometry}\n            material={materials.Body}\n          />\n          <mesh\n            geometry={nodes.Camera001_Gray_Glass_0.geometry}\n            material={materials.Gray_Glass}\n          />\n          <mesh\n            geometry={nodes.Camera001_Flash_0.geometry}\n            material={materials.Flash}\n          />\n          <mesh\n            geometry={nodes.Camera001_Port_0.geometry}\n            material={materials.Port}\n          />\n          <mesh\n            geometry={nodes.Camera001_Camera_Frame_0.geometry}\n            material={materials.Camera_Frame}\n          />\n          <mesh\n            geometry={nodes.Camera001_Camera_Glass_0.geometry}\n            material={materials.Camera_Glass}\n          />\n          <mesh\n            geometry={nodes.Camera001_Lens_0.geometry}\n            material={materials.Lens}\n          />\n          <mesh\n            geometry={nodes.Camera001_Black_Glass_0.geometry}\n            material={materials.Black_Glass}\n          />\n          <mesh\n            geometry={nodes.Camera003_Material002_0.geometry}\n            material={materials['Material.002']}\n          />\n        </group>\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/scene.gltf')\n"
        }
    ]
}