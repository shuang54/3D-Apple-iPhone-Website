{
    "sourceFile": "src/components/Scene2.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1685532696094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1685532723617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,15 +10,12 @@\n import React, { useRef } from 'react'\n import { useGLTF } from '@react-three/drei'\n import { useThree } from '@react-three/fiber';\n import { useLayoutEffect } from 'react';\n-import gsap from 'gsap';\n-import { ScrollTrigger } from 'gsap/all';\n-export default function Model({ ...props }) {\n+export default function Model2({ ...props }) {\n   const group = useRef()\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n-  let scene = useThree(state => state.scene);\n   console.log(camera)\n   useLayoutEffect(() => {\n     camera.position.set(0,2,6);\n     materials.Body.color.set('#9BB5CE');\n"
                },
                {
                    "date": 1685532878906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n   console.log(camera)\n   useLayoutEffect(() => {\n-    camera.position.set(0,2,6);\n+    camera.position.set(-0.1,0.4,5);\n     materials.Body.color.set('#9BB5CE');\n     \n   }, [])\n   // console.log(camera)\n"
                },
                {
                    "date": 1685532911458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n export default function Model2({ ...props }) {\n   const group = useRef()\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n-  console.log(camera)\n+  // console.log(camera)\n   useLayoutEffect(() => {\n     camera.position.set(-0.1,0.4,5);\n     materials.Body.color.set('#9BB5CE');\n     \n"
                },
                {
                    "date": 1685532983862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n   // console.log(camera)\n   useLayoutEffect(() => {\n-    camera.position.set(-0.1,0.4,5);\n+    // camera.position.set(-0.1,0.4,5);\n     materials.Body.color.set('#9BB5CE');\n     \n   }, [])\n   // console.log(camera)\n"
                },
                {
                    "date": 1685533001589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   const { nodes, materials } = useGLTF('/scene.gltf')\n   let camera = useThree(state => state.camera)\n   // console.log(camera)\n   useLayoutEffect(() => {\n-    // camera.position.set(-0.1,0.4,5);\n+    camera.position.set(-0.1,0.4,5);\n     materials.Body.color.set('#9BB5CE');\n     \n   }, [])\n   // console.log(camera)\n"
                }
            ],
            "date": 1685532696094,
            "name": "Commit-0",
            "content": "/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.2.2 scene.gltf\nAuthor: DatSketch (https://sketchfab.com/DatSketch)\nLicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nSource: https://sketchfab.com/3d-models/apple-iphone-13-pro-max-4328dea00e47497dbeac73c556121bc9\nTitle: Apple iPhone 13 Pro Max\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport { useThree } from '@react-three/fiber';\nimport { useLayoutEffect } from 'react';\nimport gsap from 'gsap';\nimport { ScrollTrigger } from 'gsap/all';\nexport default function Model({ ...props }) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF('/scene.gltf')\n  let camera = useThree(state => state.camera)\n  let scene = useThree(state => state.scene);\n  console.log(camera)\n  useLayoutEffect(() => {\n    camera.position.set(0,2,6);\n    materials.Body.color.set('#9BB5CE');\n    \n  }, [])\n  // console.log(camera)\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group scale={0.01}>\n        <group scale={100}>\n          <mesh\n            geometry={nodes.Frame_Frame_0.geometry}\n            material={materials.Frame}\n          />\n          <mesh\n            geometry={nodes.Frame_Frame2_0.geometry}\n            material={materials.Frame2}\n          />\n          <mesh\n            geometry={nodes.Frame_Port_0.geometry}\n            material={materials.Port}\n          />\n          <mesh\n            geometry={nodes.Frame_Antenna_0.geometry}\n            material={materials.Antenna}\n          />\n          <mesh\n            geometry={nodes.Frame_Mic_0.geometry}\n            material={materials.material}\n          />\n          <mesh\n            geometry={nodes.Body_Mic_0.geometry}\n            material={materials.material}\n          />\n          <mesh\n            geometry={nodes.Body_Bezel_0.geometry}\n            material={materials.Bezel}\n          />\n          <mesh\n            geometry={nodes.Body_Body_0.geometry}\n            material={materials.Body}\n          />\n          <mesh\n            geometry={nodes.Body_Wallpaper_0.geometry}\n            material={materials.Wallpaper}\n          />\n          <mesh\n            geometry={nodes.Body_Camera_Glass_0.geometry}\n            material={materials.Camera_Glass}\n          />\n          <mesh\n            geometry={nodes.Body_Lens_0.geometry}\n            material={materials.Lens}\n          />\n          <mesh\n            geometry={nodes.Body_Material_0.geometry}\n            material={materials.Material}\n          />\n          <mesh\n            geometry={nodes.Camera_Body_0.geometry}\n            material={materials.Body}\n          />\n          <mesh\n            geometry={nodes.Camera_Glass_0.geometry}\n            material={materials.Glass}\n          />\n          <mesh\n            geometry={nodes.Camera_Camera_Frame001_0.geometry}\n            material={materials['Camera_Frame.001']}\n          />\n          <mesh\n            geometry={nodes.Camera_Mic_0.geometry}\n            material={materials.material}\n          />\n          <mesh\n            geometry={nodes.Body001_Screen_Glass_0.geometry}\n            material={materials.Screen_Glass}\n          />\n          <mesh\n            geometry={nodes.Button_Frame_0.geometry}\n            material={materials.Frame}\n          />\n          <mesh\n            geometry={nodes.Circle003_Frame_0.geometry}\n            material={materials.Frame}\n          />\n          <mesh\n            geometry={nodes.Apple_Logo_Logo_0.geometry}\n            material={materials.Logo}\n          />\n          <mesh\n            geometry={nodes.Camera001_Body_0.geometry}\n            material={materials.Body}\n          />\n          <mesh\n            geometry={nodes.Camera001_Gray_Glass_0.geometry}\n            material={materials.Gray_Glass}\n          />\n          <mesh\n            geometry={nodes.Camera001_Flash_0.geometry}\n            material={materials.Flash}\n          />\n          <mesh\n            geometry={nodes.Camera001_Port_0.geometry}\n            material={materials.Port}\n          />\n          <mesh\n            geometry={nodes.Camera001_Camera_Frame_0.geometry}\n            material={materials.Camera_Frame}\n          />\n          <mesh\n            geometry={nodes.Camera001_Camera_Glass_0.geometry}\n            material={materials.Camera_Glass}\n          />\n          <mesh\n            geometry={nodes.Camera001_Lens_0.geometry}\n            material={materials.Lens}\n          />\n          <mesh\n            geometry={nodes.Camera001_Black_Glass_0.geometry}\n            material={materials.Black_Glass}\n          />\n          <mesh\n            geometry={nodes.Camera003_Material002_0.geometry}\n            material={materials['Material.002']}\n          />\n        </group>\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/scene.gltf')\n"
        }
    ]
}